using System.Text.Json.Serialization;

namespace Anthropic.Client.Models
{
    /// <summary>
    /// Represents a tool that Claude can use to perform specific actions.
    /// </summary>
    public class Tool
    {
        /// <summary>
        /// The type of tool. Currently supports "custom" for user-defined tools.
        /// </summary>
        [JsonPropertyName("type")]
        public string Type { get; set; } = "custom";
        
        /// <summary>
        /// The name of the tool. Must be unique within the request.
        /// </summary>
        [JsonPropertyName("name")]
        public string Name { get; set; } = string.Empty;
        
        /// <summary>
        /// A description of what the tool does and when to use it.
        /// </summary>
        [JsonPropertyName("description")]
        public string Description { get; set; } = string.Empty;
        
        /// <summary>
        /// JSON schema describing the tool's input parameters.
        /// </summary>
        [JsonPropertyName("input_schema")]
        public object InputSchema { get; set; } = new();
    }

    /// <summary>
    /// Represents a request to use a tool, as generated by Claude.
    /// </summary>
    public class ToolUse
    {
        /// <summary>
        /// The type of content, always "tool_use".
        /// </summary>
        [JsonPropertyName("type")]
        public string Type { get; set; } = "tool_use";
        
        /// <summary>
        /// Unique identifier for this tool use request.
        /// </summary>
        [JsonPropertyName("id")]
        public string Id { get; set; } = string.Empty;
        
        /// <summary>
        /// The name of the tool to use.
        /// </summary>
        [JsonPropertyName("name")]
        public string Name { get; set; } = string.Empty;
        
        /// <summary>
        /// The input parameters for the tool, as determined by Claude.
        /// </summary>
        [JsonPropertyName("input")]
        public object Input { get; set; } = new();
    }

    /// <summary>
    /// Represents the result of a tool execution, to be sent back to Claude.
    /// </summary>
    public class ToolResult
    {
        /// <summary>
        /// The type of content, always "tool_result".
        /// </summary>
        [JsonPropertyName("type")]
        public string Type { get; set; } = "tool_result";
        
        /// <summary>
        /// The ID of the tool use request this result corresponds to.
        /// </summary>
        [JsonPropertyName("tool_use_id")]
        public string ToolUseId { get; set; } = string.Empty;
        
        /// <summary>
        /// The result content from the tool execution.
        /// </summary>
        [JsonPropertyName("content")]
        public string Content { get; set; } = string.Empty;
        
        /// <summary>
        /// Whether the tool execution resulted in an error.
        /// </summary>
        [JsonPropertyName("is_error")]
        public bool? IsError { get; set; }
    }

    /// <summary>
    /// Represents different tool choice strategies.
    /// </summary>
    public static class ToolChoice
    {
        /// <summary>
        /// Let Claude decide automatically whether to use tools.
        /// </summary>
        public static readonly object Auto = new { type = "auto" };
        
        /// <summary>
        /// Force Claude to use at least one tool.
        /// </summary>
        public static readonly object Required = new { type = "any" };
        
        /// <summary>
        /// Prevent Claude from using any tools.
        /// </summary>
        public static readonly object None = new { type = "none" };
        
        /// <summary>
        /// Force Claude to use a specific tool.
        /// </summary>
        /// <param name="toolName">The name of the tool to use.</param>
        /// <returns>A tool choice object for the specified tool.</returns>
        public static object Specific(string toolName) => new { type = "tool", name = toolName };
    }
}